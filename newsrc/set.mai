(* The Set module is directly translated from OCaml *)

(* $Id: set.mai,v 1.1 1997/10/31 02:56:09 garrigue Exp $ *)

type 'a t
    (* The type of sets. *)
val empty: ('a -> 'a -> int) -> 'a t
    (* The empty set. *)
val is_empty: 'a t -> bool
    (* Test whether a set is empty or not. *)
val mem: 'a -> 'a t -> bool
    (* [mem x s] tests whether [x] belongs to the set [s]. *)
val add: 'a -> 'a t -> 'a t
    (* [add x s] returns a set containing all elements of [s],
       plus [x]. If [x] was already in [s], [s] is returned unchanged. *)
val remove: 'a -> 'a t -> 'a t
    (* [remove x s] returns a set containing all elements of [s],
       except [x]. If [x] was not in [s], [s] is returned unchanged. *)
val union: 'a t -> 'a t -> 'a t
val inter: 'a t -> 'a t -> 'a t
val diff: 'a t -> 'a t -> 'a t
    (* Union, intersection and set difference. *)
val compare: 'a t -> 'a t -> int
    (* Total ordering between sets. Can be used as the ordering function
       for doing sets of sets. *)
val equal: 'a t -> 'a t -> bool
    (* [equal s1 s2] tests whether the sets [s1] and [s2] are
       equal, that is, contain the same elements. *)
val iter: ('a -> 'b) -> 'a t -> unit
    (* [iter f s] applies [f] in turn to all elements of [s], and
       discards the results. The elements of [s] are presented to [f]
       in a non-specified order. *)
val fold: ('a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    (* [fold f s a] computes [(f xN ... (f x2 (f x1 a))...)],
       where [x1 ... xN] are the elements of [s].
       The order in which elements of [s] are presented to [f] is
       not specified. *)
val cardinal: 'a t -> int
    (* Return the number of elements of a set. *)
val elements: 'a t -> 'a list
    (* Return the list of all elements of the given set.
       The elements appear in the list in some non-specified order. *)
val choose: 'a t -> 'a
    (* Return one element of the given set, or raise [Not_found] if
       the set is empty. Which element is chosen is not specified,
       but equal elements will be chosen for equal sets. *)
