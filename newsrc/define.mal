(* $Id: define.mal,v 1.3 1997/10/31 11:11:33 garrigue Exp $ *)

open Common
open Types

(* Globally shared environment *)

type global_info =
    { mutable types: (ident, type_info) Map.t,
      mutable values: (string, value_info) Map.t,
      mutable idents: (string * ident) list,
      mutable env: (ident, Obj.t ref) Map.t }

val global =
  { types = Map.empty compare_id,
    values = Map.empty compare,
    idents = [],
    env = Map.empty compare_id }

(* types *)

val constructors : (string, constr_info) Hashtbl.t = Hashtbl.create 149
val labels : (string, label_info) Hashtbl.t = Hashtbl.create 149
val types : (string, type_info) Hashtbl.t = Hashtbl.create 149

fun make_ti id params kind =
  { ti_params = params ,
    ti_res = Tconstr (id, List.map (fn tv => Tvar tv) params) ,
    ti_kind = kind }

fun add_type name info =
  begin
    Hashtbl.add types name info;
    case info.ti_res of
      Tconstr (id, _) => global.types <- Map.add id info global.types
    | _ => failwith "define__add_info"
    end;
    case info.ti_kind of
      Kabbrev _ => ()
    | Kvariant (consts, nonconsts) =>
	List.fold_left
          (fn n name =>
	    begin
	      Hashtbl.add constructors name
		{ ci_params = info.ti_params,
	          ci_args = [],
	          ci_res = info.ti_res,
	          ci_size = 0,
	          ci_tag = n };
	      n + 1
	    end)
          0 consts;
	List.fold_left
          (fn n (name,ty_args) =>
	    begin
	      Hashtbl.add constructors name
		{ ci_params = info.ti_params,
	          ci_args = ty_args,
	          ci_res = info.ti_res,
	          ci_size = List.length ty_args,
	          ci_tag = n };
	      n + 1
	    end)
          0 nonconsts; ()
    | Krecord l =>
	val total = List.length l;
	List.fold_left
          (fn n (name, ty_arg, access) =>
	    begin
	      Hashtbl.add labels name
		{ li_params = info.ti_params,
	          li_arg = ty_arg,
	          li_res = info.ti_res,
	          li_access = access,
	          li_total = total,
	          li_index = n };
	      n + 1
	    end)
          0 l; ()
    | Kbasic => ()
    end
  end

(* values *)

fun add_value id obj info =
  begin
    global.values <- Map.add id.name info global.values;
    global.env <- Map.add id (ref obj) global.env;
    global.idents <- (id.name, id) :: global.idents
  end
