(* $Id: printer.mal,v 1.3 1997/10/31 11:11:36 garrigue Exp $ *)

open Format
open Misc
open Common
open Types
open Unify
open Define
open Predef

var vars : (type_var * string) list = []
and var_counter = 0
fun reset_vars () =
  begin vars <- []; var_counter <- 0 end

fun name_of_var tv =
  begin
    List.assq tv vars
  handle
    Not_found =>
      val n = var_counter / 26 and c = var_counter mod 26;
      val name =
	if n > 0 then
	  String.make 1 (Char.chr (c + 97)) ^ string_of_int n
	else
	  String.make 1 (Char.chr (c + 97));
      var_counter <- var_counter + 1;
      vars <- (tv, name) :: vars;
      name
  end

fun print_list prt sep l =
  case l of
    [] => ()
  | a :: l => prt a; List.iter (fn a => begin sep (); prt a end) l
  end

fun print_comma () =
  begin print_string ","; print_space () end

fun type_expr prio sch ty =
  case repr ty of
    Tvar tv =>
      if tv.level <> generic_level & sch then
	print_string "'_"
      else
	print_string "'";
      print_string (name_of_var tv)
  | Tarrow (ty1, ty2) =>
      if prio > 0 then print_string "(";
      open_hvbox 0;
      type_expr 1 sch ty1;
      print_string " ->";
      print_space ();
      type_expr 0 sch ty2;
      if prio > 0 then print_string ")";
      close_box ()
  | Ttuple [] =>
      print_string "unit"
  | Ttuple l =>
      if prio > 1 then print_string "(";
      open_hovbox 0;
      print_list (type_expr 2 sch)
        (fn () => begin print_string" *"; print_space() end)
        l;
      if prio > 1 then print_string ")";
      close_box ()
  | Tconstr (id, []) =>
      print_string id.name
  | Tconstr (id1, [ty])
    when same_id id1 id_array & repr ty = Tconstr(id_char,[]) =>
      print_string "string"
  | Tconstr (id, [ty]) =>
      open_hvbox 0;
      type_expr 2 sch ty;
      print_space ();
      print_string id.name;
      close_box ()
  | Tconstr (id, l) =>
      open_hvbox 0; open_hovbox 1;
      print_string "(";
      print_list (type_expr 0 sch) print_comma l;
      print_string ")";
      close_box ();
      print_space ();
      print_string id.name;
      close_box ()
  end

fun print_scheme ty =
  begin
    reset_vars ();
    type_expr 0 true ty
  end

and print_type ty =
  type_expr 0 false ty

var max_printer_depth = 100
var max_printer_steps = 300
var printer_steps = max_printer_steps

exception Ellipsis

fun cautious f arg =
  begin f arg
  handle Ellipsis => print_string "..."
  end

fun print_val prio depth ty obj =
  begin
    printer_steps <- printer_steps - 1;
    if printer_steps <= 0 or depth <= 0 then raise Ellipsis;
    case repr ty of
      Tvar _ => print_string "<poly>"
    | Tarrow _ => print_string "<fun>"
    | Ttuple [] => print_string "()"
    | Ttuple l =>
	open_hovbox 1;
	print_string "(";
	print_list
          (cautious (fn (ty,obj) => print_val 0 (depth-1) ty obj))
          print_comma
          (List.combine l (Array.to_list (Obj.magic obj)));
	print_string ")";
	close_box ()
    | Tconstr (id, []) when same_id id id_int =>
	print_int (Obj.magic obj)
    | Tconstr (id, []) when same_id id id_char =>
	print_string
          (case Obj.magic obj of
	    '\'' => "'\\''"
	  | c => "'" ^ Char.escaped c ^ "'"
	  end)
    | Tconstr (id, []) when same_id id id_float =>
	print_float (Obj.magic obj)
    | Tconstr (id, [ty]) when same_id id id_array =>
	case repr ty of
	  Tconstr (id, []) when same_id id id_char =>
	    print_string "\"";
	      print_string
	      (String.escaped (string_of_array (Obj.magic obj)));
	    print_string "\""
	| _ =>
	    open_hovbox 2;
	    print_string "[|";
	    cautious
	      (print_list (print_val 0 (depth-1) ty) print_comma)
	      (Array.to_list (Obj.magic obj));
	    print_string "|]";
	    close_box ()
	end
    | Tconstr (id, [ty]) when same_id id id_list =>
	open_hovbox 1;
	print_string "[";
	cautious
          (print_list (print_val 0 (depth-1) ty) print_comma)
          (Obj.magic obj);
	print_string "]";
	close_box ()
    | Tconstr (id, tyl) =>
	begin
	  val info = Map.find id global.types;
	  val s = List.combine info.ti_params tyl;
	  case info.ti_kind of
	    Kbasic => print_string "<abstract>"
	  | Kabbrev ty =>
	      printer_steps <- printer_steps - 1;
	      print_val prio depth (subst s ty) obj
	  | Kvariant (consts,nonconsts) =>
	      begin
		if not (Obj.is_block obj) then
		  print_string (List.nth consts (Obj.magic obj))
		else begin
		  val (name, tyl') = List.nth nonconsts (Obj.tag obj);
		  if prio > 0 then print_string "(";
		  open_hvbox 0;
		  print_string name;
		  print_space ();
		  case tyl' of
		    [ty'] =>
		      cautious (print_val 1 (depth+1) (subst s ty'))
			(Obj.field obj 0)
		  | _ =>
		      cautious (print_val 1 (depth+1) (subst s (Ttuple tyl')))
			obj
		  end;
		  if prio > 0 then print_string ")";
		  close_box ()
		end
	      handle Not_found => print_string "<unknown constructor>"
	      end
	  | Krecord l =>
	      open_hovbox 1;
	      print_string "{";
	      print_list
		(cautious
		   (fn ((name,ty,_),obj) =>
		     begin
		       print_string name;
		       print_string "=";
		       print_val 0 (depth+1) (subst s ty) obj
		     end))
		print_comma
		(List.combine l (Array.to_list (Obj.magic obj)));
	      print_string "}";
	      close_box ()
	  end
	handle Not_found => print_string "<unknown type>"
	end
    end
  end

fun print_value ty obj =
  begin
    printer_steps <- max_printer_steps;
    begin
      print_val 0 max_printer_depth ty obj
    handle
      x => print_newline(); flush stderr; raise x
    end
  end
