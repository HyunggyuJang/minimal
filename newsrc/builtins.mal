(* $Id: builtins.mal,v 1.6 1997/11/02 10:30:13 garrigue Exp $ *)

open Common
open Types
open Define
open Predef

(* exception handlers *)

var handlers = []

fun add_handler h = handlers <- h :: handlers

fun handle_exn exn =
  List.exists (fn handler => handler exn) handlers

(* user exception *)

exception User of string

fun minimal_fail s = raise (User (Misc.string_of_array s));

handlers <-
  [fn exn =>
    begin
      val msg =
	case exn of
	  User s => "Exception : " ^ s
	| Compile.Match_error s =>
	    if s <> "" then
	      "Match failure in " ^ s
	    else
	      "Match failure in toplevel input"
	| Not_found =>
	    "Internal : Not_found"
	| Invalid_argument "Array.get" =>
	    "Error : array access out of bounds"
	| Invalid_argument "Array.set" =>
	    "Error : array assignment out of bounds"
	| Invalid_argument s =>
	    "Invalid argument for " ^ s
	| Division_by_zero => "Division by zero"
	| Failure s => "Failure : " ^ s
	| Out_of_memory => "Out of memory"
(*	| Stack_overflow => "Stack overflow" *)
	| Sys_error s => "System error : " ^ s
	| exn => ""
	end;
      if msg = "" then false else begin
	prerr_endline ("> " ^ msg ^ ".");
	true
      end
    end]

(* definitions *)

val int = Tconstr(id_int,[])
and char = Tconstr(id_char,[])
and float = Tconstr(id_float,[])
and bool = Tconstr(id_bool,[])
and unit = Ttuple[]
and a = Tvar{link=None,level= -1}
and b = Tvar{link=None,level= -1}
and arr t t' = Tarrow(t,t')
and arr2 t1 t2 t = Tarrow(t1,Tarrow(t2,t))
and list a = Tconstr(id_list,[a])
and array a = Tconstr(id_array,[a])

val string = array char

(* tracing *)
open Trace

var builtins =
  [ ("+", Obj.repr (+) , arr2 int int int),
    ("-", Obj.repr (-) , arr2 int int int),
    ("*", Obj.repr ( * ) , arr2 int int int),
    ("/", Obj.repr (/) , arr2 int int int),
    ("mod", Obj.repr (mod) , arr2 int int int),
    ("~", Obj.repr (~-) , arr int int),
    ("+.", Obj.repr (+.) , arr2 float float float),
    ("-.", Obj.repr (-.) , arr2 float float float),
    ("*.", Obj.repr ( *.) , arr2 float float float),
    ("/.", Obj.repr (/.) , arr2 float float float),
    ("**", Obj.repr ( ** ), arr2 float float float),
    ("~.", Obj.repr (~-.) , arr float float),
    ("=", Obj.repr (=) , arr2 a a bool),
    ("<>", Obj.repr (<>), arr2 a a bool),
    ("==", Obj.repr (=) , arr2 a a bool),
    ("!=", Obj.repr (=) , arr2 a a bool),
    ("<", Obj.repr (<) , arr2 a a bool),
    (">", Obj.repr (>) , arr2 a a bool),
    ("<=", Obj.repr (<=) , arr2 a a bool),
    (">=", Obj.repr (>=) , arr2 a a bool),
    ("&", Obj.repr (&) , arr2 bool bool bool),
    ("or", Obj.repr (or) , arr2 bool bool bool),
    ("not", Obj.repr not , arr bool bool),
    ("@", Obj.repr (@) , arr2 (list a) (list a) (list a)),
    ("^", Obj.repr Array.append , arr2 (array a) (array a) (array a)),
    (".", Obj.repr Array.get , arr2 (array a) int a),
    (".<-", Obj.repr Array.set , arr2 (array a) int (arr a unit)),
    ("$.", Obj.repr Obj.field , unit),
    ("$.<-", Obj.repr Obj.set_field , unit),
(*    ("get_field", Obj.repr vect_item),
    ("set_field", Obj.repr vect_assign), *)
    ("length", Obj.repr Array.length , arr (array a) int),
    ("array", Obj.repr Array.create , arr2 int a (array a)),
    ("copy", Obj.repr Array.copy , arr (array a) (array a)),
    ("sub", Obj.repr Array.sub , arr2 (array a) int (arr int (array a))),
    ("map_array", Obj.repr Array.map , arr2 (arr a b) (array a) (array b)),
    ("do_array", Obj.repr Array.iter , arr2 (arr a b) (array a) unit),
    ("array_of_list", Obj.repr Array.of_list , arr (list a) (array a)),
    ("list_of_array", Obj.repr Array.to_list , arr (array a) (list a)),
    ("map_list", Obj.repr List.map , arr2 (arr a b) (list a) (list b)),
    ("do_list", Obj.repr List.iter , arr2 (arr a b) (list a) unit),
    ("raise", Obj.repr minimal_fail , arr string a),
    ("print_string", Obj.repr (Array.iter print_char), arr string unit),
    ("newline", Obj.repr print_newline, arr unit unit),
    ("read_string", Obj.repr (fn () => Misc.array_of_string (read_line ())),
     arr unit string),
    ("string_of_int",
     Obj.repr (fn n => Misc.array_of_string (string_of_int n)),
     arr int string),
    ("string_of_float",
     Obj.repr(fn x => Misc.array_of_string (string_of_float x)),
     arr float string),
    ("print_int", Obj.repr print_int, arr int unit),
    ("print_float", Obj.repr print_float, arr float unit),
    ("read_int", Obj.repr read_int, arr unit int),
    ("read_float", Obj.repr read_float, arr unit float),
    ("code", Obj.repr Char.code, arr char int),
    ("char", Obj.repr Char.chr, arr int char),
    ("random_init", Obj.repr Random.init, arr int unit),
    ("random_int", Obj.repr Random.int, arr int int),
    ("random_float", Obj.repr Random.float, arr float float),
    ("maxint", Obj.repr max_int, int),
    ("minint", Obj.repr min_int, int),
    ("float", Obj.repr Pervasives.float, arr int float),
    ("trunc", Obj.repr truncate, arr float int),
    ("exp", Obj.repr exp, arr float float),
    ("log", Obj.repr log, arr float float),
    ("sqrt", Obj.repr sqrt, arr float float),
    ("sin", Obj.repr sin, arr float float),
    ("cos", Obj.repr cos, arr float float),
    ("tan", Obj.repr tan, arr float float),
    ("asin", Obj.repr asin, arr float float),
    ("acos", Obj.repr acos, arr float float),
    ("atan", Obj.repr atan, arr float float),
    ("abs", Obj.repr abs_float, arr float float),
    ("trace", Obj.repr (trace max_int), arr string unit),
    ("tracen", Obj.repr trace, arr2 int string unit),
    ("untrace", Obj.repr untrace, arr string unit),
    ("untrace_all", Obj.repr untrace_all, arr unit unit),
    ("quit", Obj.repr (fn () => exit 0), arr unit unit)
  ]

fun add_builtin t = builtins <- t :: builtins

fun process_builtins () =
  List.iter
    (fn (name, obj, ty) =>
      add_value (new_id name) obj
          {vi_type = ty, vi_access = Immutable})
    builtins

