require "prelude"

type fs = File of string | Directory of (string * fs) list

val desktop = Directory [("test.ml", File"let x = 1")]
val home =
  Directory [("Desktop",desktop),(".emacs",File"(require 'caml-font)")]

fun lookup path fs =
  case (path, fs) of
  | (name::rem, Directory dir) =>
    case assoc name dir of
    | Some fs => lookup rem fs
    | None => raise "lookup"
    end
  | ([], _) => fs
  | _ => raise "lookup"
  end

fun replace a b l =
  case l of
  | [] => [(a,b)]
  | (x,y)::l => if a = x then (a,b)::l else (x,y)::replace a b l
  end

fun add_fs path fs fs0 =
  case (path, fs0) of
  | ([], _) => fs
  | (name::rem, Directory dir) =>
      val fs1 = case assoc name dir of
                | None => Directory []
                | Some fs1 => fs1
                end;
      Directory (replace name (add_fs rem fs fs1) dir)
  | _ => raise "add_fs"
  end