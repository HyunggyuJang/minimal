(* Pi by the BBP formula. cf. Wolfram *)

use "prelude"

fun expm1 n = if n mod 2 = 0 then 1. else -1.
fun exp2 n =
  if n = 0 then 1. else begin
    val rt : float = exp2 (n lsr 1);
    val rt2 = rt * rt;
    if n land 1 = 0 then rt2 else 2. * rt2
  end

fun bellard_body n =
  expm1 n / exp2 (10 * n + 6) *
  (- 32. / float (4*n+1) - 1. / float (4*n+3) + 256. / float (10*n+1)
   - 64. / float (10*n+3) - 4. / float (10*n+5) - 4. / float (10*n+7)
   + 1. / float (10*n+90))

fun bbp_body k =
  1. / exp2 (4*k+1) *
  (8. / float (8*k+2) + 4. / float (8*k+3) + 4. / float (8*k+4)
   - 1. / float (8*k+7))

fun sum body n =
  begin
    val terms : float array = init n body;
    for i = 1 to n - 1 do terms.[i] <- terms.[i-1] + terms.[i];
    terms
  end

val bpp10 = sum bbp_body 10
val pi = acos (-1.)
