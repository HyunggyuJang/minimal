fun index_from s c p =
  if p >= length s then -1 else
  if s.[p] = c then p else
  index_from s c (p+1)
;

fun index s c = index_from s c 0;

fun split_after s c p =
  begin
    val p' = index_from s c p;
    if p' < 0 then [sub s p (length s - p)] else
    sub s p (p' - p) :: split_after s c (p'+1)
  end;

fun split s c = split_after s c 0;

type 'a tree = {key: 'a, desc: 'a tree list};

fun insert tree path =
  case path of
    [] => tree
  | a::path =>
      fun insert' tree =
        case tree of
          [] => [{key=a, desc=insert [] path}]
        | p::tree =>
            if p.key = a then
              {key=a, desc=insert p.desc path}::tree
            else p :: insert' tree
        end;
      insert' tree
  end;

fun dirhier dir =
  begin
    system ("find "^dir^" -type f > file-list");
    val list = read_file "file-list";
    val plist = map_list (fn s => split s '/') list;
    fold_left insert [] plist
  end;

fun int_of_string s =
  begin
    var r = 0;
    for i = 0 to length s - 1 do begin
      val c = code s.[i] - 48;
      if c < 0 or c > 9 then raise "int_of_string";
      r <- r*10 + c;
    end;
    r
  end;

fun float_of_string s =
  begin
    var f = 0.;
    var i = 0;
    val l = length s;
    while i < l & s.[i] >= '0' & s.[i] <= '9' do begin
      f <- f * 10. + float (code s.[i] - 48);
      i <- i+1;
    end;
    if i < l & s.[i] = '.' then begin
      val d = i;
      i <- i+1;
      while i < l & s.[i] >= '0' & s.[i] <= '9' do begin
        f <- f + float (code s.[i] - 48) * (0.1 ** float (i-d));
        i <- i+1;
      end;
    end;
    if i < l & s.[i] = 'e' or s.[i] = 'E' then begin
      var sign = 1;
      i <- i+1;
      if i < l then
        if s.[i] = '+' then i <- i+1 else
        if s.[i] = '-' then begin i <- i+1; sign <- -1 end;
      var exp = 0;
      while i < l & s.[i] >= '0' & s.[i] <= '9' do begin
        exp <- exp*10 + code s.[i] - 48;
        i <- i+1
      end;
      exp <- exp * sign;
      f <- f * 10. ** float exp;
    end;
    f
  end;